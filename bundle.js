(()=>{"use strict";var e={354:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(882);t.default=class{constructor(e){this.board=new Array(e)}generateBoard(){for(let e=0;e<this.board.length;e++){this.board[e]=new Array(this.board.length);for(let t=0;t<this.board.length;t++)this.board[e][t]=i.CellType.EMPTY}return this.board}}},290:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(882);t.default=class{constructor(e){this.board=e}generateFood(){let e=Math.abs(Math.round(Math.random()*this.board.length-2)),t=Math.abs(Math.round(Math.random()*this.board.length-2));this.board[e][t]===i.CellType.SNAKE&&this.generateFood(),this.board[e][t]=i.CellType.FOOD}}},769:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getScore=t.getDirection=t.getIsplaying=t.setDirection=t.drawGame=void 0;const o=i(n(290)),r=n(882);let l=!0,c=r.Direction.UP,s=0;t.drawGame=function(e,t){let n=document.getElementById("canvas").getContext("2d"),i=e.length,a=10*i,d=t.length-1;null==n||n.clearRect(0,0,a,a);for(let l=d;l>=0;l--){if(0===l){if(c===r.Direction.RIGHT?t[0]={x:t[0].x+1,y:t[0].y}:c===r.Direction.LEFT?t[0]={x:t[0].x-1,y:t[0].y}:c===r.Direction.UP?t[0]={x:t[0].x,y:t[0].y-1}:c===r.Direction.DOWN&&(t[0]={x:t[0].x,y:t[0].y+1}),t[0].x<0||t[0].x>=i||t[0].y<0||t[0].y>=i)return void u();if(e[t[0].x][t[0].y]===r.CellType.SNAKE)return void u();e[t[0].x][t[0].y]===r.CellType.FOOD&&(s+=10,new o.default(e).generateFood(),t.push({x:t[d].x,y:t[d].y}),e[t[d].x][t[d].y]=r.CellType.SNAKE),e[t[0].x][t[0].y]=r.CellType.SNAKE}else l===d&&(e[t[l].x][t[l].y]=r.CellType.EMPTY),t[l]={x:t[l-1].x,y:t[l-1].y},e[t[l].x][t[l].y]=r.CellType.SNAKE;for(let t=0;t<e.length;t++)for(let i=0;i<e.length;i++)e[t][i]===r.CellType.FOOD&&(n.fillStyle="green",n.fillRect(10*t,10*i,10,10)),e[t][i]===r.CellType.SNAKE&&(n.fillStyle="red",n.fillRect(10*t,10*i,10,10)),e[t][i]===r.CellType.EMPTY&&(n.fillStyle="white",n.fillRect(10*t,10*i,10,10))}function u(){l=!1,null==n||n.clearRect(0,0,a,a)}},t.setDirection=function(e){c=e},t.getIsplaying=function(){return l},t.getDirection=function(){return c},t.getScore=function(){return s}},519:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=i(n(290)),r=i(n(728)),l=i(n(354)),c=n(882),s=n(769),a=document.getElementById("slider"),d=document.getElementById("speed-slider"),u=document.getElementById("canvas"),y=document.getElementById("score"),h=document.getElementById("start-button"),f=document.getElementById("border"),p=document.getElementById("text-size"),D=document.getElementById("text-speed");let g,m,T,b,v=500,E=30,x=!0;u.style.display="none",y.style.display="none",a.oninput=function(){E=Number(this.value),p.innerText=`Size: ${E}`,f.style.width=10*E+"px",f.style.height=10*E+"px"},d.oninput=function(){v=Number(500-10*this.value),D.innerText=`Speed: ${this.value}`},h.addEventListener("click",(function(){!function(){(function(e){let t=e.requestFullScreen||e.webkitRequestFullScreen||e.mozRequestFullScreen||e.msRequestFullScreen;if(t)t.call(e);else if(void 0!==window.ActiveXObject){var n=new ActiveXObject("WScript.Shell");null!==n&&n.SendKeys("{F11}")}})(document.body.parentElement),u.style.display="block",y.style.display="block",h.style.display="none",p.style.display="none",a.style.display="none",f.style.display="none",D.style.display="none",d.style.display="none",u.width=10*E,u.height=10*E,m=new l.default(E).generateBoard(),T=new r.default(m).generateSnake(),new o.default(m).generateFood();let e=setInterval((function(){(0,s.drawGame)(m,T),x=(0,s.getIsplaying)(),b=(0,s.getDirection)(),g=(0,s.getScore)(),y.innerText=`Score: ${g}`,x||(clearInterval(e),setTimeout((function(){confirm("GameOver! Wanna go again?")&&window.location.reload()}),300))}),v);window.addEventListener("keydown",(function(e){e.preventDefault(),"ArrowLeft"===e.key&&b!==c.Direction.RIGHT?(0,s.setDirection)(c.Direction.LEFT):"ArrowRight"===e.key&&b!==c.Direction.LEFT?(0,s.setDirection)(c.Direction.RIGHT):"ArrowUp"===e.key&&b!==c.Direction.DOWN?(0,s.setDirection)(c.Direction.UP):"ArrowDown"===e.key&&b!==c.Direction.UP&&(0,s.setDirection)(c.Direction.DOWN)})),document.addEventListener("touchstart",(function(e){const i=function(e){return e.touches}(e)[0];t=i.clientX,n=i.clientY}),!1),document.addEventListener("touchmove",(function(e){if(!t||!n)return;let i=e.touches[0].clientX,o=e.touches[0].clientY,r=t-i,l=n-o;Math.abs(r)>Math.abs(l)?r>0&&b!==c.Direction.RIGHT?(0,s.setDirection)(c.Direction.LEFT):b!==c.Direction.LEFT&&(0,s.setDirection)(c.Direction.RIGHT):l>0&&b!==c.Direction.DOWN?(0,s.setDirection)(c.Direction.UP):b!==c.Direction.UP&&(0,s.setDirection)(c.Direction.DOWN),t=null,n=null}),!1);let t=null,n=null}()}))},728:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(882);t.default=class{constructor(e){this.snakeSize=3,this.board=e}generateSnake(){let e=new Array(this.snakeSize),t=Number(Math.round(this.board.length/2)),n=Number(Math.round(this.board.length/2));for(let o=0;o<this.snakeSize;o++)e[o]={x:t-o,y:n},this.board[t-o][n]=i.CellType.SNAKE;return e}}},882:(e,t)=>{var n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.Direction=t.CellType=void 0,(i=t.CellType||(t.CellType={}))[i.FOOD=0]="FOOD",i[i.SNAKE=1]="SNAKE",i[i.EMPTY=2]="EMPTY",(n=t.Direction||(t.Direction={}))[n.RIGHT=0]="RIGHT",n[n.LEFT=1]="LEFT",n[n.UP=2]="UP",n[n.DOWN=3]="DOWN"}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXRCLEVBSFhkLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRa0MsVUFBWWxDLEVBQVFZLGNBQVcsR0FFNUJBLEVBSUdaLEVBQVFZLFdBQWFaLEVBQVFZLFNBQVcsS0FIekNBLEVBQWUsS0FBSSxHQUFLLE9BQ2pDQSxFQUFTQSxFQUFnQixNQUFJLEdBQUssUUFDbENBLEVBQVNBLEVBQWdCLE1BQUksR0FBSyxTQUczQnNCLEVBS0lsQyxFQUFRa0MsWUFBY2xDLEVBQVFrQyxVQUFZLEtBSjNDQSxFQUFpQixNQUFJLEdBQUssUUFDcENBLEVBQVVBLEVBQWdCLEtBQUksR0FBSyxPQUNuQ0EsRUFBVUEsRUFBYyxHQUFJLEdBQUssS0FDakNBLEVBQVVBLEVBQWdCLEtBQUksR0FBSyxTQ2JuQ2dGLEVBQTJCLElBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFySCxRQUdyQixJQUFJdUgsRUFBU0wsRUFBeUJFLEdBQVksQ0FHakRwSCxRQUFTLElBT1YsT0FIQXdILEVBQW9CSixHQUFVbEMsS0FBS3FDLEVBQU92SCxRQUFTdUgsRUFBUUEsRUFBT3ZILFFBQVNtSCxHQUdwRUksRUFBT3ZILFFDbEJXbUgsQ0FBb0IsTSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbG1vcmEvLi9zcmMvYm9hcmQudHMiLCJ3ZWJwYWNrOi8vZmlsbW9yYS8uL3NyYy9mb29kLnRzIiwid2VicGFjazovL2ZpbG1vcmEvLi9zcmMvZ2FtZS50cyIsIndlYnBhY2s6Ly9maWxtb3JhLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vZmlsbW9yYS8uL3NyYy9zbmFrZS50cyIsIndlYnBhY2s6Ly9maWxtb3JhLy4vc3JjL3V0aWwudHMiLCJ3ZWJwYWNrOi8vZmlsbW9yYS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9maWxtb3JhL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5jbGFzcyBCb2FyZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihzaXplKSB7XHJcbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ldyBBcnJheShzaXplKTtcclxuICAgIH1cclxuICAgIC8vTWFrZSBhbiBhcnJheSBvZiBhcnJheXMgd2l0aCB0aGUgZ2l2ZW4gc2l6ZSB0byByZXByZXNlbnQgdGhlIGdhbWUgYm9hcmQuLi5cclxuICAgIC8vIEV4YW1wbGUtWyAgIFxyXG4gICAgLy8gICAgICAgICAgICAgWyAgLCAgLCAgLCAgLCBdLFxyXG4gICAgLy8gICAgICAgICAgICAgWyAgLCAgLCAgLCAgLCBdLFxyXG4gICAgLy8gICAgICAgICAgICAgWyAgLCAgLCAgLCAgLCBdLFxyXG4gICAgLy8gICAgICAgICAgICAgWyAgLCAgLCAgLCAgLCBdXHJcbiAgICAvLyAgICAgICAgIF07XHJcbiAgICBnZW5lcmF0ZUJvYXJkKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmJvYXJkW2ldID0gbmV3IEFycmF5KHRoaXMuYm9hcmQubGVuZ3RoKTtcclxuICAgICAgICAgICAgLy9Jbml0aWFsbHkgbWFyayBhbGwgb2YgdGhlIHNwYWNlcyBpbiB0aGUgYm9hcmQgYXMgXCJFbXB0eVwiO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuYm9hcmQubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbaV1bal0gPSB1dGlsXzEuQ2VsbFR5cGUuRU1QVFk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9GaW5hbGx5IHJldHVybiB0aGUgZ2VuZXJhdGVkIGJvYXJkLi4uXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9hcmQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gQm9hcmQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcbmNsYXNzIEZvb2Qge1xyXG4gICAgY29uc3RydWN0b3IoYm9hcmQpIHtcclxuICAgICAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XHJcbiAgICB9XHJcbiAgICAvL1JhbmRvbWx5IGdlbmVyYXRlIGZvb2QgYW55d2hlcmUgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIGdhbWUgYm9hcmQuLi5cclxuICAgIGdlbmVyYXRlRm9vZCgpIHtcclxuICAgICAgICBsZXQgcm93ID0gTWF0aC5hYnMoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogdGhpcy5ib2FyZC5sZW5ndGggLSAyKSk7XHJcbiAgICAgICAgbGV0IGNvbCA9IE1hdGguYWJzKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIHRoaXMuYm9hcmQubGVuZ3RoIC0gMikpO1xyXG4gICAgICAgIC8vIElmIGdlbmVyYXRlZCBmb29kIGlzIG9uIHRoZSBzbmFrZSwgcnVuIHRoZSBmdW5jdGlvbiBhZ2Fpbi4uLlxyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkW3Jvd11bY29sXSA9PT0gdXRpbF8xLkNlbGxUeXBlLlNOQUtFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVGb29kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm9hcmRbcm93XVtjb2xdID0gdXRpbF8xLkNlbGxUeXBlLkZPT0Q7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gRm9vZDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRTY29yZSA9IGV4cG9ydHMuZ2V0RGlyZWN0aW9uID0gZXhwb3J0cy5nZXRJc3BsYXlpbmcgPSBleHBvcnRzLnNldERpcmVjdGlvbiA9IGV4cG9ydHMuZHJhd0dhbWUgPSB2b2lkIDA7XHJcbmNvbnN0IGZvb2RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mb29kXCIpKTtcclxuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxubGV0IGlzUGxheWluZyA9IHRydWU7XHJcbmxldCBkaXJlY3Rpb24gPSB1dGlsXzEuRGlyZWN0aW9uLlVQO1xyXG5sZXQgc2NvcmUgPSAwO1xyXG5mdW5jdGlvbiBkcmF3R2FtZShib2FyZCwgc25ha2UpIHtcclxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIGxldCBzaXplID0gYm9hcmQubGVuZ3RoO1xyXG4gICAgbGV0IGNhbnZhc1NpemUgPSBzaXplICogMTA7XHJcbiAgICBsZXQgaGVhZCA9IDA7XHJcbiAgICBsZXQgdGFpbCA9IHNuYWtlLmxlbmd0aCAtIDE7XHJcbiAgICBjb250ZXh0ID09PSBudWxsIHx8IGNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1NpemUsIGNhbnZhc1NpemUpO1xyXG4gICAgZm9yIChsZXQgaSA9IHRhaWw7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgLy9IYW5kbGUgaGVhZC4uLlxyXG4gICAgICAgIGlmIChpID09PSBoZWFkKSB7XHJcbiAgICAgICAgICAgIC8vTW92ZSBjb29yZGluYXRlIG9mIHNuYWtlIGhlYWQgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLi4uXHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IHV0aWxfMS5EaXJlY3Rpb24uUklHSFQpIHtcclxuICAgICAgICAgICAgICAgIHNuYWtlW2hlYWRdID0geyB4OiBzbmFrZVtoZWFkXS54ICsgMSwgeTogc25ha2VbaGVhZF0ueSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gdXRpbF8xLkRpcmVjdGlvbi5MRUZUKSB7XHJcbiAgICAgICAgICAgICAgICBzbmFrZVtoZWFkXSA9IHsgeDogc25ha2VbaGVhZF0ueCAtIDEsIHk6IHNuYWtlW2hlYWRdLnkgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaXJlY3Rpb24gPT09IHV0aWxfMS5EaXJlY3Rpb24uVVApIHtcclxuICAgICAgICAgICAgICAgIHNuYWtlW2hlYWRdID0geyB4OiBzbmFrZVtoZWFkXS54LCB5OiBzbmFrZVtoZWFkXS55IC0gMSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gdXRpbF8xLkRpcmVjdGlvbi5ET1dOKSB7XHJcbiAgICAgICAgICAgICAgICBzbmFrZVtoZWFkXSA9IHsgeDogc25ha2VbaGVhZF0ueCwgeTogc25ha2VbaGVhZF0ueSArIDEgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL0NoZWNrIGlmIGhlYWQgY29sbGlkZWQgd2l0aCBib3VuZGFyeS4uLlxyXG4gICAgICAgICAgICBpZiAoc25ha2VbaGVhZF0ueCA8IDAgfHxcclxuICAgICAgICAgICAgICAgIHNuYWtlW2hlYWRdLnggPj0gc2l6ZSB8fFxyXG4gICAgICAgICAgICAgICAgc25ha2VbaGVhZF0ueSA8IDAgfHxcclxuICAgICAgICAgICAgICAgIHNuYWtlW2hlYWRdLnkgPj0gc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZU92ZXIoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL0NoZWNrIGlmIHNuYWtlIGhpdCBpdHNlbGYuLi5cclxuICAgICAgICAgICAgaWYgKGJvYXJkW3NuYWtlW2hlYWRdLnhdW3NuYWtlW2hlYWRdLnldID09PSB1dGlsXzEuQ2VsbFR5cGUuU05BS0UpIHtcclxuICAgICAgICAgICAgICAgIGdhbWVPdmVyKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9DaGVjayBpZiBzbmFrZSBhdGUgZm9vZC4uLlxyXG4gICAgICAgICAgICBpZiAoYm9hcmRbc25ha2VbaGVhZF0ueF1bc25ha2VbaGVhZF0ueV0gPT09IHV0aWxfMS5DZWxsVHlwZS5GT09EKSB7XHJcbiAgICAgICAgICAgICAgICBzY29yZSA9IHNjb3JlICsgMTA7XHJcbiAgICAgICAgICAgICAgICBuZXcgZm9vZF8xLmRlZmF1bHQoYm9hcmQpLmdlbmVyYXRlRm9vZCgpO1xyXG4gICAgICAgICAgICAgICAgc25ha2UucHVzaCh7IHg6IHNuYWtlW3RhaWxdLngsIHk6IHNuYWtlW3RhaWxdLnkgfSk7XHJcbiAgICAgICAgICAgICAgICBib2FyZFtzbmFrZVt0YWlsXS54XVtzbmFrZVt0YWlsXS55XSA9IHV0aWxfMS5DZWxsVHlwZS5TTkFLRTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBib2FyZFtzbmFrZVtoZWFkXS54XVtzbmFrZVtoZWFkXS55XSA9IHV0aWxfMS5DZWxsVHlwZS5TTkFLRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vSGFuZGxlIHRhaWwuLi5cclxuICAgICAgICAgICAgaWYgKGkgPT09IHRhaWwpIHtcclxuICAgICAgICAgICAgICAgIGJvYXJkW3NuYWtlW2ldLnhdW3NuYWtlW2ldLnldID0gdXRpbF8xLkNlbGxUeXBlLkVNUFRZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdGFpbCB0byB0YWtlIHRoZSBvbmUgcHJlY2VkaW5nIGl0Li4uXHJcbiAgICAgICAgICAgIHNuYWtlW2ldID0geyB4OiBzbmFrZVtpIC0gMV0ueCwgeTogc25ha2VbaSAtIDFdLnkgfTtcclxuICAgICAgICAgICAgYm9hcmRbc25ha2VbaV0ueF1bc25ha2VbaV0ueV0gPSB1dGlsXzEuQ2VsbFR5cGUuU05BS0U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vUGFpbnQgZWFjaCBjZWxsIG9mIHRoZSBncmlkIGFjY29yZGluZyB0byB0aGUgY2VsbC10eXBlLi4uXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvYXJkLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9hcmRbaV1bal0gPT09IHV0aWxfMS5DZWxsVHlwZS5GT09EKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnZ3JlZW4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoaSAqIDEwLCBqICogMTAsIDEwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9hcmRbaV1bal0gPT09IHV0aWxfMS5DZWxsVHlwZS5TTkFLRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JlZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChpICogMTAsIGogKiAxMCwgMTAsIDEwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChib2FyZFtpXVtqXSA9PT0gdXRpbF8xLkNlbGxUeXBlLkVNUFRZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnd2hpdGUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3QoaSAqIDEwLCBqICogMTAsIDEwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnYW1lT3ZlcigpIHtcclxuICAgICAgICBpc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICBjb250ZXh0ID09PSBudWxsIHx8IGNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1NpemUsIGNhbnZhc1NpemUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZHJhd0dhbWUgPSBkcmF3R2FtZTtcclxuZnVuY3Rpb24gc2V0RGlyZWN0aW9uKGRpcikge1xyXG4gICAgZGlyZWN0aW9uID0gZGlyO1xyXG59XHJcbmV4cG9ydHMuc2V0RGlyZWN0aW9uID0gc2V0RGlyZWN0aW9uO1xyXG5mdW5jdGlvbiBnZXRJc3BsYXlpbmcoKSB7XHJcbiAgICByZXR1cm4gaXNQbGF5aW5nO1xyXG59XHJcbmV4cG9ydHMuZ2V0SXNwbGF5aW5nID0gZ2V0SXNwbGF5aW5nO1xyXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gZGlyZWN0aW9uO1xyXG59XHJcbmV4cG9ydHMuZ2V0RGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uO1xyXG5mdW5jdGlvbiBnZXRTY29yZSgpIHtcclxuICAgIHJldHVybiBzY29yZTtcclxufVxyXG5leHBvcnRzLmdldFNjb3JlID0gZ2V0U2NvcmU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGZvb2RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mb29kXCIpKTtcclxuY29uc3Qgc25ha2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zbmFrZVwiKSk7XHJcbmNvbnN0IGJvYXJkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYm9hcmRcIikpO1xyXG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5jb25zdCBnYW1lXzEgPSByZXF1aXJlKFwiLi9nYW1lXCIpO1xyXG5jb25zdCBzbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNsaWRlclwiKTtcclxuY29uc3Qgc3BlZWRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwZWVkLXNsaWRlclwiKTtcclxuY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbmNvbnN0IHNjb3JlQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjb3JlXCIpO1xyXG5jb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0LWJ1dHRvblwiKTtcclxuY29uc3QgYm9yZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJib3JkZXJcIik7XHJcbmNvbnN0IHNpemVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0LXNpemVcIik7XHJcbmNvbnN0IHNwZWVkVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGV4dC1zcGVlZFwiKTtcclxubGV0IHNjb3JlO1xyXG5sZXQgc3BlZWQgPSA1MDA7XHJcbmxldCBzaXplID0gMzA7XHJcbmxldCBib2FyZDtcclxubGV0IHNuYWtlO1xyXG5sZXQgaXNQbGF5aW5nID0gdHJ1ZTtcclxubGV0IGRpcmVjdGlvbjtcclxuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuc2NvcmVCb2FyZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbnNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBzaXplID0gTnVtYmVyKHRoaXMudmFsdWUpO1xyXG4gICAgc2l6ZVRleHQuaW5uZXJUZXh0ID0gYFNpemU6ICR7c2l6ZX1gO1xyXG4gICAgYm9yZGVyLnN0eWxlLndpZHRoID0gYCR7c2l6ZSAqIDEwfXB4YDtcclxuICAgIGJvcmRlci5zdHlsZS5oZWlnaHQgPSBgJHtzaXplICogMTB9cHhgO1xyXG59O1xyXG5zcGVlZFNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBzcGVlZCA9IE51bWJlcig1MDAgLSB0aGlzLnZhbHVlICogMTApO1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBzcGVlZFRleHQuaW5uZXJUZXh0ID0gYFNwZWVkOiAke3RoaXMudmFsdWV9YDtcclxufTtcclxuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBzdGFydEdhbWUoKTtcclxufSk7XHJcbmZ1bmN0aW9uIHJlcXVlc3RGdWxsU2NyZWVuKGVsZW1lbnQpIHtcclxuICAgIGxldCByZXF1ZXN0TWV0aG9kID0gZWxlbWVudC5yZXF1ZXN0RnVsbFNjcmVlbiB8fCBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIHx8IGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4gfHwgZWxlbWVudC5tc1JlcXVlc3RGdWxsU2NyZWVuO1xyXG4gICAgaWYgKHJlcXVlc3RNZXRob2QpIHtcclxuICAgICAgICByZXF1ZXN0TWV0aG9kLmNhbGwoZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93LkFjdGl2ZVhPYmplY3QgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICB2YXIgd3NjcmlwdCA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiV1NjcmlwdC5TaGVsbFwiKTtcclxuICAgICAgICBpZiAod3NjcmlwdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB3c2NyaXB0LlNlbmRLZXlzKFwie0YxMX1cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcclxuICAgIHJlcXVlc3RGdWxsU2NyZWVuKGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudCk7XHJcbiAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIHNjb3JlQm9hcmQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBzaXplVGV4dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBzbGlkZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgYm9yZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIHNwZWVkVGV4dC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBzcGVlZFNsaWRlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBjYW52YXMud2lkdGggPSBzaXplICogMTA7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDEwO1xyXG4gICAgYm9hcmQgPSBuZXcgYm9hcmRfMS5kZWZhdWx0KHNpemUpLmdlbmVyYXRlQm9hcmQoKTtcclxuICAgIHNuYWtlID0gbmV3IHNuYWtlXzEuZGVmYXVsdChib2FyZCkuZ2VuZXJhdGVTbmFrZSgpO1xyXG4gICAgbmV3IGZvb2RfMS5kZWZhdWx0KGJvYXJkKS5nZW5lcmF0ZUZvb2QoKTtcclxuICAgIGxldCBoYW5kbGUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgKDAsIGdhbWVfMS5kcmF3R2FtZSkoYm9hcmQsIHNuYWtlKTtcclxuICAgICAgICBpc1BsYXlpbmcgPSAoMCwgZ2FtZV8xLmdldElzcGxheWluZykoKTtcclxuICAgICAgICBkaXJlY3Rpb24gPSAoMCwgZ2FtZV8xLmdldERpcmVjdGlvbikoKTtcclxuICAgICAgICBzY29yZSA9ICgwLCBnYW1lXzEuZ2V0U2NvcmUpKCk7XHJcbiAgICAgICAgc2NvcmVCb2FyZC5pbm5lclRleHQgPSBgU2NvcmU6ICR7c2NvcmV9YDtcclxuICAgICAgICBpZiAoIWlzUGxheWluZykge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGhhbmRsZSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oXCJHYW1lT3ZlciEgV2FubmEgZ28gYWdhaW4/XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHNwZWVkKTtcclxuICAgIC8vU2V0IGRpcmVjdGlvbiBhY2NvcmRpbmcgdG8gaW5wdXQgZnJvbSBwbGF5ZXIuLi5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93TGVmdFwiICYmIGRpcmVjdGlvbiAhPT0gdXRpbF8xLkRpcmVjdGlvbi5SSUdIVCkge1xyXG4gICAgICAgICAgICAoMCwgZ2FtZV8xLnNldERpcmVjdGlvbikodXRpbF8xLkRpcmVjdGlvbi5MRUZUKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIkFycm93UmlnaHRcIiAmJiBkaXJlY3Rpb24gIT09IHV0aWxfMS5EaXJlY3Rpb24uTEVGVCkge1xyXG4gICAgICAgICAgICAoMCwgZ2FtZV8xLnNldERpcmVjdGlvbikodXRpbF8xLkRpcmVjdGlvbi5SSUdIVCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJBcnJvd1VwXCIgJiYgZGlyZWN0aW9uICE9PSB1dGlsXzEuRGlyZWN0aW9uLkRPV04pIHtcclxuICAgICAgICAgICAgKDAsIGdhbWVfMS5zZXREaXJlY3Rpb24pKHV0aWxfMS5EaXJlY3Rpb24uVVApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiQXJyb3dEb3duXCIgJiYgZGlyZWN0aW9uICE9PSB1dGlsXzEuRGlyZWN0aW9uLlVQKSB7XHJcbiAgICAgICAgICAgICgwLCBnYW1lXzEuc2V0RGlyZWN0aW9uKSh1dGlsXzEuRGlyZWN0aW9uLkRPV04pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy9JbnB1dCBmcm9tIG1vYmlsZSBkZXZpY2VzLi4uXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICBsZXQgeERvd24gPSBudWxsO1xyXG4gICAgbGV0IHlEb3duID0gbnVsbDtcclxuICAgIGZ1bmN0aW9uIGdldFRvdWNoZXMoZXZ0KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2dC50b3VjaGVzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldnQpIHtcclxuICAgICAgICBjb25zdCBmaXJzdFRvdWNoID0gZ2V0VG91Y2hlcyhldnQpWzBdO1xyXG4gICAgICAgIHhEb3duID0gZmlyc3RUb3VjaC5jbGllbnRYO1xyXG4gICAgICAgIHlEb3duID0gZmlyc3RUb3VjaC5jbGllbnRZO1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2dCkge1xyXG4gICAgICAgIGlmICgheERvd24gfHwgIXlEb3duKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHhVcCA9IGV2dC50b3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgICAgbGV0IHlVcCA9IGV2dC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgICAgbGV0IHhEaWZmID0geERvd24gLSB4VXA7XHJcbiAgICAgICAgbGV0IHlEaWZmID0geURvd24gLSB5VXA7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHhEaWZmKSA+IE1hdGguYWJzKHlEaWZmKSkge1xyXG4gICAgICAgICAgICBpZiAoeERpZmYgPiAwICYmIGRpcmVjdGlvbiAhPT0gdXRpbF8xLkRpcmVjdGlvbi5SSUdIVCkge1xyXG4gICAgICAgICAgICAgICAgKDAsIGdhbWVfMS5zZXREaXJlY3Rpb24pKHV0aWxfMS5EaXJlY3Rpb24uTEVGVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uICE9PSB1dGlsXzEuRGlyZWN0aW9uLkxFRlQpIHtcclxuICAgICAgICAgICAgICAgICgwLCBnYW1lXzEuc2V0RGlyZWN0aW9uKSh1dGlsXzEuRGlyZWN0aW9uLlJJR0hUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHlEaWZmID4gMCAmJiBkaXJlY3Rpb24gIT09IHV0aWxfMS5EaXJlY3Rpb24uRE9XTikge1xyXG4gICAgICAgICAgICAgICAgKDAsIGdhbWVfMS5zZXREaXJlY3Rpb24pKHV0aWxfMS5EaXJlY3Rpb24uVVApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiAhPT0gdXRpbF8xLkRpcmVjdGlvbi5VUCkge1xyXG4gICAgICAgICAgICAgICAgKDAsIGdhbWVfMS5zZXREaXJlY3Rpb24pKHV0aWxfMS5EaXJlY3Rpb24uRE9XTik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgeERvd24gPSBudWxsO1xyXG4gICAgICAgIHlEb3duID0gbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5jbGFzcyBTbmFrZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihib2FyZCkge1xyXG4gICAgICAgIHRoaXMuc25ha2VTaXplID0gMztcclxuICAgICAgICB0aGlzLmJvYXJkID0gYm9hcmQ7XHJcbiAgICB9XHJcbiAgICAvL0dlbmVyYXRlIHNuYWtlIGluIHRoZSBtaWRkbGUgb2YgdGhlIGdhbWUgYm9hcmQuLi5cclxuICAgIGdlbmVyYXRlU25ha2UoKSB7XHJcbiAgICAgICAgbGV0IHNuYWtlID0gbmV3IEFycmF5KHRoaXMuc25ha2VTaXplKTtcclxuICAgICAgICBsZXQgcm93ID0gTnVtYmVyKE1hdGgucm91bmQodGhpcy5ib2FyZC5sZW5ndGggLyAyKSk7XHJcbiAgICAgICAgbGV0IGNvbCA9IE51bWJlcihNYXRoLnJvdW5kKHRoaXMuYm9hcmQubGVuZ3RoIC8gMikpO1xyXG4gICAgICAgIC8vIFNuYWtlIG9iamVjdCBpcyBhbiBhcnJheSB3aGljaCBob2xkcyB0aGUgeCBhbmQgeSBjb29yZGluYXRlIG9mIGl0cyBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbmFrZVNpemU7IGkrKykge1xyXG4gICAgICAgICAgICBzbmFrZVtpXSA9IHsgeDogcm93IC0gaSwgeTogY29sIH07XHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmRbcm93IC0gaV1bY29sXSA9IHV0aWxfMS5DZWxsVHlwZS5TTkFLRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNuYWtlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFNuYWtlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRpcmVjdGlvbiA9IGV4cG9ydHMuQ2VsbFR5cGUgPSB2b2lkIDA7XHJcbnZhciBDZWxsVHlwZTtcclxuKGZ1bmN0aW9uIChDZWxsVHlwZSkge1xyXG4gICAgQ2VsbFR5cGVbQ2VsbFR5cGVbXCJGT09EXCJdID0gMF0gPSBcIkZPT0RcIjtcclxuICAgIENlbGxUeXBlW0NlbGxUeXBlW1wiU05BS0VcIl0gPSAxXSA9IFwiU05BS0VcIjtcclxuICAgIENlbGxUeXBlW0NlbGxUeXBlW1wiRU1QVFlcIl0gPSAyXSA9IFwiRU1QVFlcIjtcclxufSkoQ2VsbFR5cGUgPSBleHBvcnRzLkNlbGxUeXBlIHx8IChleHBvcnRzLkNlbGxUeXBlID0ge30pKTtcclxudmFyIERpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChEaXJlY3Rpb24pIHtcclxuICAgIERpcmVjdGlvbltEaXJlY3Rpb25bXCJSSUdIVFwiXSA9IDBdID0gXCJSSUdIVFwiO1xyXG4gICAgRGlyZWN0aW9uW0RpcmVjdGlvbltcIkxFRlRcIl0gPSAxXSA9IFwiTEVGVFwiO1xyXG4gICAgRGlyZWN0aW9uW0RpcmVjdGlvbltcIlVQXCJdID0gMl0gPSBcIlVQXCI7XHJcbiAgICBEaXJlY3Rpb25bRGlyZWN0aW9uW1wiRE9XTlwiXSA9IDNdID0gXCJET1dOXCI7XHJcbn0pKERpcmVjdGlvbiA9IGV4cG9ydHMuRGlyZWN0aW9uIHx8IChleHBvcnRzLkRpcmVjdGlvbiA9IHt9KSk7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTE5KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInV0aWxfMSIsImNvbnN0cnVjdG9yIiwic2l6ZSIsInRoaXMiLCJib2FyZCIsIkFycmF5IiwiZ2VuZXJhdGVCb2FyZCIsImkiLCJsZW5ndGgiLCJqIiwiQ2VsbFR5cGUiLCJFTVBUWSIsImdlbmVyYXRlRm9vZCIsInJvdyIsIk1hdGgiLCJhYnMiLCJyb3VuZCIsInJhbmRvbSIsImNvbCIsIlNOQUtFIiwiRk9PRCIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJnZXRTY29yZSIsImdldERpcmVjdGlvbiIsImdldElzcGxheWluZyIsInNldERpcmVjdGlvbiIsImRyYXdHYW1lIiwiZm9vZF8xIiwiaXNQbGF5aW5nIiwiZGlyZWN0aW9uIiwiRGlyZWN0aW9uIiwiVVAiLCJzY29yZSIsInNuYWtlIiwiY29udGV4dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0IiwiY2FudmFzU2l6ZSIsInRhaWwiLCJjbGVhclJlY3QiLCJSSUdIVCIsIngiLCJ5IiwiTEVGVCIsIkRPV04iLCJnYW1lT3ZlciIsImRlZmF1bHQiLCJwdXNoIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJkaXIiLCJzbmFrZV8xIiwiYm9hcmRfMSIsImdhbWVfMSIsInNsaWRlciIsInNwZWVkU2xpZGVyIiwiY2FudmFzIiwic2NvcmVCb2FyZCIsImJ1dHRvbiIsImJvcmRlciIsInNpemVUZXh0Iiwic3BlZWRUZXh0Iiwic3BlZWQiLCJzdHlsZSIsImRpc3BsYXkiLCJvbmlucHV0IiwiTnVtYmVyIiwiaW5uZXJUZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJhZGRFdmVudExpc3RlbmVyIiwiZWxlbWVudCIsInJlcXVlc3RNZXRob2QiLCJyZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJtc1JlcXVlc3RGdWxsU2NyZWVuIiwiY2FsbCIsIndpbmRvdyIsIkFjdGl2ZVhPYmplY3QiLCJ3c2NyaXB0IiwiU2VuZEtleXMiLCJib2R5IiwicGFyZW50RWxlbWVudCIsImdlbmVyYXRlU25ha2UiLCJoYW5kbGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiY29uZmlybSIsImxvY2F0aW9uIiwicmVsb2FkIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImtleSIsImV2dCIsImZpcnN0VG91Y2giLCJ0b3VjaGVzIiwiZ2V0VG91Y2hlcyIsInhEb3duIiwiY2xpZW50WCIsInlEb3duIiwiY2xpZW50WSIsInhVcCIsInlVcCIsInhEaWZmIiwieURpZmYiLCJzdGFydEdhbWUiLCJzbmFrZVNpemUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==